{"version":3,"sources":["App.tsx","index.tsx"],"names":["propositions","type","annotationIds","id","description","displayId","truthValue","hasAtleastOneContraArgument","edges","source","target","App","g","dagre","graphlib","Graph","setGraph","nodeSep","rankSep","setDefaultEdgeLabel","forEach","prop","setNode","width","height","edge","setEdge","layout","useEffect","cleanup","drawHelloWorld","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAiDMA,EAA8B,CAClC,CACEC,KAAM,UACNC,cAAe,GACfC,GAAI,IACJC,YACE,wMACFC,UAAW,KACXC,WAAY,GACZC,6BAA6B,GAE/B,CACEN,KAAM,UACNC,cAAe,GACfC,GAAI,IACJC,YACE,wMACFC,UAAW,KACXC,WAAY,GACZC,6BAA6B,GAE/B,CACEN,KAAM,UACNC,cAAe,GACfC,GAAI,IACJC,YACE,wMACFC,UAAW,KACXC,WAAY,GACZC,6BAA6B,GAE/B,CACEN,KAAM,aACNC,cAAe,GACfC,GAAI,IACJC,YACE,wMACFC,UAAW,KACXC,WAAY,GACZC,6BAA6B,IAI3BC,EAAQ,CACZ,CACEL,GAAI,MACJM,OAAQ,IACRC,OAAQ,KAEV,CACEP,GAAI,MACJM,OAAQ,IACRC,OAAQ,KAEV,CACEP,GAAI,MACJM,OAAQ,IACRC,OAAQ,MA2BGC,MAvBf,WACE,IAAMC,EAAI,IAAIC,IAAMC,SAASC,MAe7B,OAdAH,EAAEI,SAAS,CAAEC,QAAS,IAAKC,QAAS,MACpCN,EAAEO,qBAAoB,iBAAO,MAC7BnB,EAAaoB,SAAQ,SAACC,GAAD,OACnBT,EAAEU,QAAQD,EAAKlB,GAAI,CAAEkB,KAAK,eAAMA,GAAQE,MAAO,IAAKC,OAAQ,SAE9DhB,EAAMY,SAAQ,SAACK,GAAD,OAAUb,EAAEc,QAAQD,EAAKhB,OAAQgB,EAAKf,WACpDG,IAAMc,OAAOf,GAEbgB,qBAAU,WACR,IAAMC,EAAUC,2BAEhB,OAAO,kBAAMD,OACZ,IAGD,qBAAKE,UAAU,MAAM5B,GAAG,MAAxB,SACE,qBAAKA,GAAG,YC3Hd6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.63d54174.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { drawHelloWorld } from \"@disputas/unnamed\";\nimport domserver from \"react-dom/server\";\nimport { TiTrash } from \"react-icons/ti\";\n//@ts-ignore\nimport dagre from \"@disputas/dagre\";\n\nexport type PropositionType =\n  | \"premise\"\n  | \"conclusion\"\n  | \"relevance\"\n  | \"unsorted\";\n\ninterface Proposition {\n  type: PropositionType;\n  annotationIds: string[];\n  id: string;\n  description: string;\n  displayId: string;\n  truthValue: boolean | number;\n  hasAtleastOneContraArgument: boolean;\n}\n\nconst TopButton = ({ icon }: { icon: JSX.Element }) => {\n  return <div className=\"topButton\">{icon}</div>;\n};\n\nconst TestComponent = ({\n  proposition,\n  show,\n}: {\n  proposition: Proposition;\n  show: string;\n}) => {\n  const { type, description, displayId } = proposition;\n  return (\n    <>\n      {(show === proposition.id && (\n        <TopButton icon={<TiTrash color=\"white\" />} />\n      )) || <div style={{ width: \"100%\", height: \"2rem\" }} />}\n\n      <fieldset className={`wrapper ${type}`}>\n        <legend className=\"tag\">{displayId}</legend>\n        <p className=\"content\">{description}</p>\n      </fieldset>\n    </>\n  );\n};\n\nconst propositions: Proposition[] = [\n  {\n    type: \"premise\",\n    annotationIds: [],\n    id: \"1\",\n    description:\n      \"In what follows, I shall argue that the way people in relatively affluent countries react to a situation like that in Bengal cannot be justified; indeed, the whole way we look at moral issues - our\",\n    displayId: \"P1\",\n    truthValue: 50,\n    hasAtleastOneContraArgument: false,\n  },\n  {\n    type: \"premise\",\n    annotationIds: [],\n    id: \"2\",\n    description:\n      \"In what follows, I shall argue that the way people in relatively affluent countries react to a situation like that in Bengal cannot be justified; indeed, the whole way we look at moral issues - our\",\n    displayId: \"P2\",\n    truthValue: 50,\n    hasAtleastOneContraArgument: false,\n  },\n  {\n    type: \"premise\",\n    annotationIds: [],\n    id: \"4\",\n    description:\n      \"In what follows, I shall argue that the way people in relatively affluent countries react to a situation like that in Bengal cannot be justified; indeed, the whole way we look at moral issues - our\",\n    displayId: \"P3\",\n    truthValue: 50,\n    hasAtleastOneContraArgument: false,\n  },\n  {\n    type: \"conclusion\",\n    annotationIds: [],\n    id: \"3\",\n    description:\n      \"In what follows, I shall argue that the way people in relatively affluent countries react to a situation like that in Bengal cannot be justified; indeed, the whole way we look at moral issues - our\",\n    displayId: \"C1\",\n    truthValue: 50,\n    hasAtleastOneContraArgument: false,\n  },\n];\n\nconst edges = [\n  {\n    id: \"100\",\n    source: \"1\",\n    target: \"3\",\n  },\n  {\n    id: \"101\",\n    source: \"2\",\n    target: \"3\",\n  },\n  {\n    id: \"102\",\n    source: \"4\",\n    target: \"3\",\n  },\n];\n\nfunction App() {\n  const g = new dagre.graphlib.Graph();\n  g.setGraph({ nodeSep: 200, rankSep: 400 });\n  g.setDefaultEdgeLabel(() => ({}));\n  propositions.forEach((prop) =>\n    g.setNode(prop.id, { prop: { ...prop }, width: 300, height: 120 })\n  );\n  edges.forEach((edge) => g.setEdge(edge.source, edge.target));\n  dagre.layout(g);\n\n  useEffect(() => {\n    const cleanup = drawHelloWorld();\n\n    return () => cleanup();\n  }, []);\n\n  return (\n    <div className=\"App\" id=\"app\">\n      <svg id=\"main\"></svg>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}